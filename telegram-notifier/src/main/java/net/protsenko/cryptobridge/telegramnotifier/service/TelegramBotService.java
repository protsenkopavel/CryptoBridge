package net.protsenko.cryptobridge.telegramnotifier.service;

import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.protsenko.cryptobridge.telegramnotifier.dto.PriceSpreadResultDTO;
import net.protsenko.cryptobridge.telegramnotifier.dto.TradingInfoDTO;
import net.protsenko.cryptobridge.telegramnotifier.dto.TradingNetworkInfoDTO;
import net.protsenko.cryptobridge.telegramnotifier.props.TelegramBotProperties;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

@Slf4j
@Service
@RequiredArgsConstructor
public class TelegramBotService extends TelegramLongPollingBot {

    private final TelegramBotProperties properties;
    private final TelegramSubscriberService subscriberService;

    @PostConstruct
    public void init() {
        try {
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            botsApi.registerBot(this);
            log.info("Telegram bot registered");
        } catch (Exception e) {
            log.error("Error registering Telegram bot", e);
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            Message message = update.getMessage();
            Long chatId = message.getChatId();
            String text = message.getText().trim().toLowerCase();

            switch (text) {
                case "/start" -> {
                    subscriberService.subscribe(chatId);
                    sendMessage(chatId, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–µ.\n–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop");
                    log.info("–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}", chatId);
                }
                case "/stop" -> {
                    subscriberService.unsubscribe(chatId);
                    sendMessage(chatId, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.");
                    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è: {}", chatId);
                }
                default -> sendMessage(chatId, """
                                                ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                        /start ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        /stop ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        """);
            }
        }
    }

    @Override
    public String getBotUsername() {
        return properties.getUsername();
    }

    @Override
    public String getBotToken() {
        return properties.getToken();
    }

    public void notifyUsers(PriceSpreadResultDTO spread) {
        String message = formatSpreadMessage(spread);
        for (Long chatId : subscriberService.getAllChatIds()) {
            sendMessage(chatId, message);
        }
        log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", subscriberService.getAllChatIds().size());
    }

    public void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setParseMode("HTML");
        try {
            execute(message);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {}: {}", chatId, e.getMessage());
        }
    }

    public String formatSpreadMessage(PriceSpreadResultDTO spread) {
        String baseAsset = spread.baseCurrency();

        StringBuilder sb = new StringBuilder();
        sb.append("üìà <b>").append(spread.instrument()).append("</b>")
                .append(" | –°–ø—Ä–µ–¥: ").append(formatPriceWithDollar(spread.spread()))
                .append(" (").append(formatPercent(spread.spreadPercentage())).append(")\n\n");

        sb.append("<b>–ü–æ–∫—É–ø–∫–∞:</b>  ")
                .append(spread.buyExchange()).append("   ")
                .append(formatPriceWithDollar(spread.buyPrice())).append("\n")
                .append("–û–±—ä–µ–º 24—á: ").append(formatVolumeShort(spread.buyVolume())).append("\n");
        appendBuyWithdrawInfo(sb, spread.buyTradingInfo(), baseAsset);

        sb.append("\n<b>–ü—Ä–æ–¥–∞–∂–∞:</b>  ")
                .append(spread.sellExchange()).append("   ")
                .append(formatPriceWithDollar(spread.sellPrice())).append("\n")
                .append("–û–±—ä–µ–º 24—á: ").append(formatVolumeShort(spread.sellVolume())).append("\n");
        appendSellDepositInfo(sb, spread.sellTradingInfo());

        return sb.toString();
    }

    private void appendBuyWithdrawInfo(StringBuilder sb, TradingInfoDTO info, String asset) {
        if (info != null && info.networks() != null && !info.networks().isEmpty()) {
            for (TradingNetworkInfoDTO n : info.networks()) {
                sb.append("–°–µ—Ç—å: ").append(nonEmpty(n.network()))
                        .append("  –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥: ").append(formatFeeSmart(n.withdrawFee(), asset))
                        .append("  –í—ã–≤–æ–¥: ").append(n.withdrawEnabled() ? "‚úÖ" : "‚ùå").append("\n");
            }
        }
    }

    private void appendSellDepositInfo(StringBuilder sb, TradingInfoDTO info) {
        if (info != null && info.networks() != null && !info.networks().isEmpty()) {
            for (TradingNetworkInfoDTO n : info.networks()) {
                sb.append("–°–µ—Ç—å: ").append(nonEmpty(n.network()))
                        .append("  –í–≤–æ–¥: ").append(n.depositEnabled() ? "‚úÖ" : "‚ùå").append("\n");
            }
        }
    }

    private String formatPriceWithDollar(double price) {
        return "$" + String.format("%.6f", price);
    }

    private String formatVolumeShort(Double volume) {
        if (volume == null) return "‚Äî";
        double v = volume;
        if (v >= 1_000_000_000) return String.format("%.1fB", v / 1_000_000_000.0);
        if (v >= 1_000_000) return String.format("%.1fM", v / 1_000_000.0);
        if (v >= 1_000) return String.format("%.1fK", v / 1_000.0);
        return String.format("%.0f", v);
    }

    private String formatFeeSmart(double fee, String asset) {
        if (fee < 0) return "N/A";
        return (fee % 1 == 0 ? String.valueOf((int) fee) : String.valueOf(fee)) + " " + asset;
    }

    private String formatPercent(double percent) {
        return String.format("%.2f%%", percent);
    }

    private String nonEmpty(String s) {
        return (s == null || s.isEmpty()) ? "‚Äî" : s;
    }

}
