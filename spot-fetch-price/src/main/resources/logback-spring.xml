<?xml version="1.0" encoding="UTF-8"?>
<configuration monitorInterval="30">

    <!-- Setting up log path and log file name -->
    <property name="LOG_PATH" value="./logs" />
    <property name="LOG_FILE_NAME" value="spot-price-fetcher" />
    <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} %-5level [%thread] %logger{36} : %msg%n"/>

    <!-- Setting up logging pattern for console logging -->
    <appender name="ConsoleOutput"
              class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d{HH:mm:ss.SSS} %highlight(%-5level) %cyan(%class{30}.%M:%L) - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- Setting the filename and logging pattern for log file -->
    <appender name="LogFileInfo"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${LOG_FILE_NAME}-info.log</file>
        <encoder
                class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>${FILE_LOG_PATTERN}</Pattern>
        </encoder>

        <!-- Filter for messages with level only INFO -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!-- Setting up a rolling policy with rolling done
              daily and when file size is 10MB -->
        <rollingPolicy
                class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/archived/${LOG_FILE_NAME}-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFileNamingAndTriggeringPolicy">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>

    <!-- Setting the filename and logging pattern for log file -->
    <appender name="LogFileError"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${LOG_FILE_NAME}-error.log</file>
        <encoder
                class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>${FILE_LOG_PATTERN}</Pattern>
        </encoder>

        <!-- Filter for messages with level only ERROR -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!-- Setting up a rolling policy with rolling done
              daily and when file size is 10MB -->
        <rollingPolicy
                class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/archived/${LOG_FILE_NAME}-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFileNamingAndTriggeringPolicy">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>

    <!-- Root logger for all messages -->
    <root level="info">
        <appender-ref ref="ConsoleOutput" />
        <appender-ref ref="LogFileError" />
    </root>

    <!-- Logging INFO and above only for net.protsenko.spotfetchprice -->
    <logger name="net.protsenko.spotfetchprice" level="info" additivity="true">
        <appender-ref ref="LogFileInfo" />
    </logger>

</configuration>